package com.xeeapps.HuPlayer;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.drawable.Drawable;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.os.PowerManager;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.webkit.WebView;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.widget.TextView;
import com.xeeapps.service.SongDetails;
import com.xeeapps.utils.GetLyricsTask;
import com.xeeapps.utils.TimeFormatter;

import java.io.IOException;
import java.util.Random;
import java.util.concurrent.ExecutionException;

/**
 * Created with IntelliJ IDEA. User: khafaga Date: 11/09/12 Time: 05:17 Ù… To
 * change this template use File | Settings | File Templates.
 */
public class PlayerActivity extends Activity implements
		SeekBar.OnSeekBarChangeListener {
	private ImageButton playPauseButton, nextButton, previousButton,
			stopButton,repeatButton,shuffleButton;
	private int currentSongPosition;
    private String currentRepeatState =Globals.REPEAT_NONE;
    private String currentShuffleState =  Globals.SHUFFLE_OFF;
	private Handler handler = new Handler();
	private SeekBar progressBar;
//	private Cursor songsCursor;
	private MediaPlayer player = MediaPlayerFactory.getMediaPlayer();
	private TextView leftDurationLbl, playedDurationLbl;
    private WebView lyricsView;
    private TextView titleView;
    private String lyricsWords;
//    private int shuffleCounter;
    private Bundle bundle;

    private Object[] songDetailsList;
    private int currentSongIndex;
    private String songState=Globals.RUNNING_SONG;
    private SongDetails currentSongDetails;
    private String albumArtPath;
	//private Document doc;

	private Runnable uiUpdater = new Runnable() {

		public void run() {
			// while (player.getCurrentPosition() < player.getDuration()) {
			Log.i("updating GUI", "done");
			// progressBar.setProgress((player.getDuration() / player
			// .getCurrentPosition()) * 100);
//            lyricsView.loadData(lyricsWords,"lyricsWords/html", "UTF-8");
//            lyricsView.reload();
			progressBar.setProgress( player.getCurrentPosition());
			leftDurationLbl.setText(TimeFormatter.toHoursAndMinutesAndSeconds(player.getDuration()-player.getCurrentPosition()));
			playedDurationLbl.setText(TimeFormatter.toHoursAndMinutesAndSeconds(player.getCurrentPosition()));
			handler.postDelayed(this, 100);

			// }

		}
	};


//    @Override
//    protected void onRestart() {
//        super.onRestart();    //To change body of overridden methods use File | Settings | File Templates.
//
//    }

//    public boolean onKeyDown(int keyCode, KeyEvent event)
//    {
//
//        if (keyCode == KeyEvent.KEYCODE_BACK)
//        {
//            moveTaskToBack(true);
//            return true; // return
//        }
//
//        return false;
//    }

    public void onCreate(Bundle savedInstanceState) {

		super.onCreate(savedInstanceState);

        bundle = getIntent().getExtras();
        if(bundle!=null){
            albumArtPath  = Globals.ALBUM_ART_PATH = bundle.getString("albumArtPath");

            songDetailsList = Globals.SONG_DETAILS_LIST =  (Object[]) bundle.getSerializable("songDetailsList");
            currentSongDetails = Globals.CURRENT_SONG_DETAILS =  (SongDetails) bundle.get("currentSongDetails");
            currentSongIndex = Globals.CURRENT_SONG_INDEX =  bundle.getInt("currentSongIndex");
        }
//        else{
//            currentSongDetails = Globals.CURRNT_SONGDETAILS;
//        }


		setContentView(R.layout.player);
        currentRepeatState =  Globals.CURRENT_REPEAT_STATE;
        currentShuffleState = Globals.CURRENT_SHUFFLE_STATE;

           //initialize gui.
		playPauseButton = (ImageButton) findViewById(R.id.playPauseButton);
        shuffleButton = (ImageButton) findViewById(R.id.shuffleButton);
        repeatButton = (ImageButton) findViewById(R.id.repeatButton);
        if(currentRepeatState.equals(Globals.REPEAT_ALL)){
            repeatButton.setImageResource(R.drawable.repeatall);
        }else if(currentRepeatState.equals(Globals.REPEAT_CURRENT)){
            repeatButton.setImageResource(R.drawable.repeatcurrent);
        } else{
            repeatButton.setImageResource(R.drawable.repeatnone);
        }

        if(currentShuffleState.equals(Globals.SHUFFLE_ON)){
               shuffleButton.setImageResource(R.drawable.shuffleon);
        }else{
            shuffleButton.setImageResource(R.drawable.shuffleoff);
        }
		lyricsView = (WebView) findViewById(R.id.webView);
        Drawable background = Drawable.createFromPath(albumArtPath);
        lyricsView.setBackgroundColor(0);
        lyricsView.setBackgroundDrawable(background);
        titleView = (TextView) findViewById(R.id.titleView);
//        titleView.setText(currentSongDetails.getSongTitle());
//         lyricsView.setTy

		nextButton = (ImageButton) findViewById(R.id.nextButton);
		previousButton = (ImageButton) findViewById(R.id.previousButton);
	//	stopButton = (ImageButton) findViewById(R.id.stopButton);
		progressBar = (SeekBar) findViewById(R.id.progressBar);
		progressBar.setOnSeekBarChangeListener(this);
		leftDurationLbl = (TextView) findViewById(R.id.leftDurationLbl);
		playedDurationLbl = (TextView) findViewById(R.id.playedDurationLbl);


//        if(player.isPlaying()&&Globals.CURRENT_SONG.equals(currentSongDetails.getSongTitle())){
//            progressBar.setMax(player.getDuration());
//            updateProgressBar();
//        }
		// handler.postDelayed(uiUpdater, 100);
		nextButton.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {
//				songsCursor = Globals.CURRENT_CURSOR;
				if (currentSongIndex < songDetailsList.length-1) {
					//Globals.CURRENT_SONG = songsCursor.getString(1);
                    currentSongIndex++;


//					playSong(songs[currentSongIndex]);
//					 playPauseButton.setImageResource(R.drawable.playerpause);
//					 songState = Globals.RUNNING_SONG;
				}else{
                    currentSongIndex =0;

                }
                currentSongDetails = (SongDetails) songDetailsList[currentSongIndex];
                playSong(currentSongDetails.getSongData());
                playPauseButton.setImageResource(R.drawable.playerpause);
                songState = Globals.RUNNING_SONG;
                updateLyricsView();
                Globals.CURRENT_SONG_INDEX =  currentSongIndex;
                Globals.CURRENT_SONG_DETAILS =  currentSongDetails;
                Globals.CURRENT_SONG =  currentSongDetails.getSongTitle();

			}
		});
		previousButton.setOnClickListener(new OnClickListener() {

			public void onClick(View v) {
			//	songsCursor = Globals.CURRENT_CURSOR;
				if (currentSongIndex >0) {
					//Globals.CURRENT_SONG = songsCursor.getString(1);
                    currentSongIndex--;

				}else{
                    currentSongIndex = songDetailsList.length-1;

                }
                currentSongDetails = (SongDetails) songDetailsList[currentSongIndex];
//                titleView.setText(currentSongDetails.getSongTitle());
                playSong(currentSongDetails.getSongData());
                playPauseButton.setImageResource(R.drawable.playerpause);
                songState = Globals.RUNNING_SONG;
                updateLyricsView();

                Globals.CURRENT_SONG_INDEX =  currentSongIndex;
                Globals.CURRENT_SONG_DETAILS =  currentSongDetails;
                Globals.CURRENT_SONG =  currentSongDetails.getSongTitle();
			}
		});

	//	playPauseButton.setImageResource(R.drawable.playerpause);
		playPauseButton.setOnClickListener(new OnClickListener() {
			public void onClick(View view) {
				if (songState.equals(Globals.PAUSED_SONG)) {

					playPauseButton
							.setImageResource(R.drawable.playerpause);

					player.seekTo(currentSongPosition);
					player.start();

					songState = Globals.RUNNING_SONG;
				} else if (songState.equals(Globals.RUNNING_SONG)) {
					playPauseButton
							.setImageResource(R.drawable.playerplay);
					currentSongPosition = player.getCurrentPosition();
					player.pause();
					songState = Globals.PAUSED_SONG;
				} else {
					playSong(currentSongDetails.getSongData());
					songState = Globals.RUNNING_SONG;
					playPauseButton
					.setImageResource(R.drawable.playerpause);

				}

			}
		});


        repeatButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
            if(currentRepeatState.equals(Globals.REPEAT_NONE)){
                  currentRepeatState = Globals.CURRENT_REPEAT_STATE  =   Globals.REPEAT_CURRENT;
                currentShuffleState = Globals.CURRENT_SHUFFLE_STATE =  Globals.SHUFFLE_OFF;
                shuffleButton.setImageResource(R.drawable.shuffleoff);
                repeatButton.setImageResource(R.drawable.repeatcurrent);
                player.setLooping(true);

            } else if(currentRepeatState.equals(Globals.REPEAT_CURRENT)){
                player.setLooping(false);
                currentRepeatState = Globals.CURRENT_REPEAT_STATE =  Globals.REPEAT_ALL;
                repeatButton.setImageResource(R.drawable.repeatall);
            } else{
                player.setLooping(false);
                currentRepeatState =  Globals.CURRENT_REPEAT_STATE  = Globals.REPEAT_NONE;
                repeatButton.setImageResource(R.drawable.repeatnone);
                currentShuffleState =  Globals.CURRENT_SHUFFLE_STATE  =Globals.SHUFFLE_OFF;
                shuffleButton.setImageResource(R.drawable.shuffleoff);
            }


            }
        });
        player.setOnCompletionListener(new MediaPlayer.OnCompletionListener() {
            @Override
            public void onCompletion(MediaPlayer mediaPlayer) {
                Log.i("does it come here???","yes");
                if (songDetailsList==null) songDetailsList = Globals.SONG_DETAILS_LIST;
                currentSongIndex =  Globals.CURRENT_SONG_INDEX;
               if(currentRepeatState.equals(Globals.REPEAT_NONE)){


                   if(currentSongIndex <songDetailsList.length-1){
                     currentSongIndex++;
//                       Globals.CURRENT_SONG_INDEX++;
                       currentSongDetails = (SongDetails) songDetailsList[currentSongIndex];

                       playSong(currentSongDetails.getSongData());
                       playPauseButton.setImageResource(R.drawable.playerpause);
                       songState = Globals.RUNNING_SONG;
                       updateLyricsView();
                   }else{
                       currentSongIndex =0;

                       currentSongDetails = (SongDetails) songDetailsList[currentSongIndex];
                       playPauseButton.setImageResource(R.drawable.playerplay);
                       songState = Globals.STOPPED_SONG;
                       titleView.setText(currentSongDetails.getSongTitle());
                       player.seekTo(0);
                       updateProgressBar();
                       updateLyricsView();
                   }

               }else{
                   if(currentRepeatState.equals(Globals.REPEAT_ALL)){
                       if(currentShuffleState.equals(Globals.SHUFFLE_OFF)){
                           if(currentSongIndex <songDetailsList.length-1){
                               currentSongIndex++;
                           }else{
                               currentSongIndex =0;
                           }
                       }else{
                           Random random = new Random();
                             currentSongIndex = random.nextInt(songDetailsList.length);
                       }



                       currentSongDetails = (SongDetails) songDetailsList[currentSongIndex];
                       playSong(currentSongDetails.getSongData());
                       playPauseButton.setImageResource(R.drawable.playerpause);
                       songState = Globals.RUNNING_SONG;
                       updateLyricsView();
                   }
               }
                Globals.CURRENT_SONG_INDEX =  currentSongIndex;
                Globals.CURRENT_SONG_DETAILS =  currentSongDetails;
                Globals.CURRENT_SONG =  currentSongDetails.getSongTitle();
            }

        });


        shuffleButton.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                if(currentShuffleState.equals(Globals.SHUFFLE_OFF)){
                        currentShuffleState = Globals.CURRENT_SHUFFLE_STATE = Globals.SHUFFLE_ON;
                    shuffleButton.setImageResource(R.drawable.shuffleon);
                    repeatButton.setImageResource(R.drawable.repeatall);
                    currentRepeatState = Globals.REPEAT_ALL;
                }else{
                    currentShuffleState = Globals.CURRENT_SHUFFLE_STATE  = Globals.SHUFFLE_OFF;
                    shuffleButton.setImageResource(R.drawable.shuffleoff);
                }

            }
        });

//		stopButton.setOnClickListener(new OnClickListener() {
//
//			public void onClick(View v) {
//				playPauseButton.setImageResource(R.drawable.playerplay);
//				// currentSongPosition = 0;
//
//				songState = Globals.STOPPED_SONG;
//				player.stop();
//				updateProgressBar();
//				// player.release();
//
//			}
//		});


            if(currentSongDetails!=null){
                if (!currentSongDetails.getSongData().equals("")&& songState.equals(Globals.RUNNING_SONG)) {

//            lyricsView.loadDataWithBaseURL(null,lyricsWords,"lyricsWords/html", "UTF-8",null);

                    playSong(currentSongDetails.getSongData());
                }

            }

        updateLyricsView();

//       lyricsView.loadData(lyricsWords,"lyricsWords/html", "UTF-8");
//        lyricsView.loadDataWithBaseURL(null,lyricsWords,"lyricsWords/html","UTF-8",null);

	}

	public void onProgressChanged(SeekBar seekBar, int progress,
			boolean fromUser) {
		// TODO Auto-generated method stub

	}

	public void onStartTrackingTouch(SeekBar seekBar) {
		handler.removeCallbacks(uiUpdater);

	}

	public void onStopTrackingTouch(SeekBar seekBar) {
		handler.removeCallbacks(uiUpdater);
		currentSongPosition = progressBar.getProgress();
		player.seekTo(currentSongPosition);
		updateProgressBar();

	}

	public void updateProgressBar() {
		handler.postDelayed(uiUpdater, 100);

	}


    public void playSong(String songToPlay) {
		try {
//			if(!player.isPlaying()){
//            lyricsView.loadDataWithBaseURL(null,lyricsWords,"lyricsWords/html", "UTF-8",null);

            if(player.isPlaying()){
                if(Globals.CURRENT_SONG==null||Globals.CURRENT_SONG.equals(currentSongDetails.getSongTitle())){
                    Globals.CURRENT_SONG=currentSongDetails.getSongTitle();
                 //   Globals.CURRNT_SONGDETAILS = currentSongDetails;
                    progressBar.setMax(player.getDuration());
                    titleView.setText(currentSongDetails.getSongTitle());
            updateProgressBar();
                    return;
                }
            }
          //  if(!Globals.CURRENT_SONG.equals(currentSongDetails.getSongTitle())){

               ComponentName service =    startService(new Intent(this, MusicPlayerService.class));

                player.reset();
                player.setDataSource(songToPlay);
                player.prepare();
                player.start();
            player.setWakeMode(this, PowerManager.PARTIAL_WAKE_LOCK);
                progressBar.setProgress(0);
                progressBar.setMax(player.getDuration());
                titleView.setText(currentSongDetails.getSongTitle());
            Globals.CURRENT_SONG=currentSongDetails.getSongTitle();
        //    Globals.CURRNT_SONGDETAILS = currentSongDetails;
                //  updateLyricsView();
//            lyricsView.loadData(lyricsWords,"lyricsWords/html", "UTF-8");
                updateProgressBar();
           // }


//			}


		} catch (IOException e) {
			// e.printStackTrace(); // To change body of catch statement use
			// File | Settings | File Templates.
			Log.e(e.getMessage(), e.toString());
		}

	}
	  @Override
	    public void onConfigurationChanged(Configuration newConfig) {
	    	// TODO Auto-generated method stub
	    	super.onConfigurationChanged(newConfig);
	    }

    public boolean updateLyricsView(){
        lyricsWords = "Some Error";
        try {
            String[] songSlices = currentSongDetails.getSongData().split("/");
            String artistName = currentSongDetails.getArtistName().trim();
            String songName =  songSlices[songSlices.length-1].replace(".mp3","").replace(artistName,"").replaceAll("(.-)*[0-9]*","").trim();
            Log.i("song - artist",songName+" - "+artistName);
            Log.i("link","http://hulyrics.com/LyricsService/webresources/service/getLyricBySongCriteria?title="+songName+"&artistName="+artistName);
//            Log.i("artist:");
            lyricsWords = new GetLyricsTask().execute(songName,artistName).get();
            if(lyricsWords==null) lyricsWords="";
            lyricsWords ="<body style=' -webkit-text-stroke: 1px black;\n" +
                    "   color: white;\n" +
                    "   text-shadow:\n" +
                    "       3px 3px 0 #000,\n" +
                    "     -1px -1px 0 #000,  \n" +
                    "      1px -1px 0 #000,\n" +
                    "      -1px 1px 0 #000,\n" +
                    "       1px 1px 0 #000;;font-weight:bolder;'>"+ lyricsWords +"</body>";
            lyricsView.loadDataWithBaseURL(null, lyricsWords, "text/html", "UTF-8", null);
            Log.i("words" ,lyricsWords);
//            Log.i("the lyric:",lyricsWords);
        } catch (InterruptedException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        } catch (ExecutionException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
        return true;
    }
}